<%= form_with(model: pantry_item) do |form| %>
  <% if pantry_item.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(pantry_item.errors.count, "error") %> prohibited this pantry_item from being saved:</h2>

      <ul>
        <% pantry_item.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= form.label :name, style: "display: block" %>
    <%= form.text_field :name %>
  </div>

  <div>
    <%= form.hidden_field :barcode, id: "barcode-result" %>
  </div>

  <div>
    <%= form.hidden_field :user_id %>
  </div>

  <%# app/views/pantry_items/_form.html.erb %> 
  <button id="start-scanner" type="button" class="btn btn-secondary">
    Scan Barcode
  </button>

  <video id="scanner-video" style="display:block; width:300px;"></video>

  <script>

    document.addEventListener('DOMContentLoaded', initScanner);
    document.addEventListener('turbo:load', initScanner);

    function initScanner() {
      // Check if we're on the right page (has scanner elements)
      const videoElem = document.getElementById('scanner-video');
      const barcodeInput = document.getElementById('barcode-result');
      
      if (!videoElem || !barcodeInput) return;
      
      console.log("Scanner elements found, initializing camera...");
      
      // Ensure ZXing is loaded
      if (typeof ZXing === 'undefined') {
        console.error("ZXing library not loaded! Please check script inclusion.");
        return;
      }
      
      // Initialize scanner
      const codeReader = new ZXing.BrowserMultiFormatReader();
      
      // Show video element
      videoElem.style.display = 'block';
      
      // Start camera immediately
      codeReader.decodeFromVideoDevice(null, videoElem, (result) => {
        if (result) {
          console.log("Barcode detected:", result.text);
          barcodeInput.value = result.text;
          codeReader.reset();
          videoElem.style.display = 'none';
          const form = document.querySelector("form");
          form.submit();
        }
      }).catch(err => {
        console.error("Camera error:", err);
      });
      
      // Set up cleanup for when leaving page
      const backLink = document.getElementById("custom-link");
      if (backLink) {
        backLink.addEventListener("click", () => {
          console.log("Back link clicked, stopping camera");
          codeReader.reset();
          videoElem.style.display = 'none';
        });
      }
      
      // Manual scanner button as fallback
      const startScannerButton = document.getElementById('start-scanner');
      if (startScannerButton) {
        startScannerButton.addEventListener('click', () => {
          console.log("Start scanner button clicked");
          // If camera is not visible, show it
          if (videoElem.style.display !== 'block') {
            videoElem.style.display = 'block';
            
            // Restart camera if needed
            codeReader.decodeFromVideoDevice(null, videoElem, (result) => {
              if (result) {
                console.log("Barcode detected:", result.text);
                barcodeInput.value = result.text;
                codeReader.reset();
                videoElem.style.display = 'none';
                const form = document.querySelector("form");
                form.submit();
              }
            }).catch(err => {
              console.error("Camera restart error:", err);
            });
          }
        });
      }
    }
  </script>

  <div>
    <%= form.submit %>
  </div>
  <div>
    <%= link_to "Back to pantry items", pantry_items_path, id: "custom-link" %>

  </div>
<% end %>
